//Q2: 計算2個正整數的最大公因數&最小公倍數
//
//姓名：丘梓杰
//班別：資管二B
//學號：410923254


import java.io.*;
import java.util.*;
public class W3_Q2{
public static ArrayList<Integer> primeFactorize(int n) {
    if (n < 2) {
        return new ArrayList<>();
    } else if (n <= 3) {
        final ArrayList<Integer> primeFactor = new ArrayList<>(1);
 
        primeFactor.add(n);
 
        return primeFactor;
    } else {
        final ArrayList<Integer> primeFactors = new ArrayList<>();
 
        final ArrayList<Integer> primes = getPrimeNumber(2, (int) Math.floor(Math.sqrt(n)));
 
        for (final int prime : primes) {
            while (n > 1 && n % prime == 0) {
                primeFactors.add(prime);
                n /= prime;
            }
        }
 
        if (primeFactors.isEmpty()) {
            primeFactors.add(n);
        }
 
        return primeFactors;
    }
}
)
 
public static ArrayList<Integer> getPrimeNumber(int a, final int b) {
    final ArrayList<Integer> result = new ArrayList<>();
 
    switch (a) {
        case 0:
        case 1:
            if (b >= 3) {
                result.add(2);
                result.add(3);
 
                a = 5;
            } else if (b == 2) {
                result.add(2);
                return result;
            } else {
                return result;
            }
            break;
        case 2:
            result.add(2);
 
            if (b == 2) {
                return result;
            }
 
            result.add(3);
            a = 5;
            break;
        case 3:
            result.add(3);
            a = 5;
            break;
        default:
            if (a % 2 == 0) {
                ++a;
            }
    }
 
    outer:
    for (int n = a; n <= b; n += 2) {
        final int m = n % 6;
 
        if (m != 1 && m != 5) {
            continue;
        }
 
        final int nSqrt = (int) Math.floor(Math.sqrt(n));
 
        if (nSqrt >= a) {
            for (int i = 5; i < a; i += 6) {
                if (n % i == 0 || n % (i + 2) == 0) { // n % i: 6n + 5 -> 6(n + 1) - 1 -> 6n - 1, n % (i + 2): 6n + 1
                    continue outer;
                }
            }
 
            for (final int p : result) {
                if (p > nSqrt) {
                    break;
                }
 
                if (n % p == 0) {
                    continue outer;
                }
            }
        } else {
            for (int i = 5; i <= nSqrt; i += 6) {
                if (n % i == 0 || n % (i + 2) == 0) { // n % i: 6n + 5 -> 6(n + 1) - 1 -> 6n - 1, n % (i + 2): 6n + 1
                    continue outer;
                }
            }
        }
 
        result.add(n);
    }
 
    return result;
}